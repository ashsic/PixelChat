scalar Date

type Query {
  user(id:ID!): User

  users: [User]

  userChats(ids:[ID!]): [Chat]

  verifyJwt: User
}

type Mutation {
  signUp(
    username: String!,
    email: String!,
    firstName: String!,
    lastName: String!,
    password: String!,
    dob: String,
    bio: String
  ): User

  login(email: String!, password: String!): User

  logout: String # token

  createChat(
    participants: [String!]!
    name: String!
  ): Chat

  sendMessage(
    chat: String!
    sender: String!
    text: String
    image: String
    likes: Int
    timestamp: String
    hidden: Boolean
  ): Chat
}

type Subscription {
  messageSent: Message
}

type User {
  _id: ID!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  dob: Date!
  bio: String!
  picture: String
  chats: [String!]!
  posts: [String!]!
  followers: [String!]!
  following: [String!]!
}

type Chat {
  _id: ID!
  participants: [String!]!
  name: String!
  messages: [Message!]!
}

type Message {
  sender: ID!
  username: String!
  text: String!
  image: String
  likes: Int
  timestamp: String
  hidden: Boolean
}

type Post {
  _id: ID!
  poster: User!
  text: String!
  timestamp: String!
  likes: Int!
  comments: [Comment!]!
  images: [String!]!
}

type Comment {
  commenter: User!
  text: String!
  timestamp: String!
  likes: Int!
  replies: [CommentReply!]!
}

type CommentReply {
  comment: Comment!
  replier: User!
  text: String!
  timestamp: String!
  likes: Int!
}

type AuthPayload {
  token: String
  user: User
}