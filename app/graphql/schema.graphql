# GraphQL Schema

# TODO: standardize id variable names, change userChats, implement resolvers

scalar Date

type Query {
  # User queries:
  # Get a user by id
  user(id:ID!): User

  # Get all users
  users: [User]

  # Get the user (self) making the request by their id in their JWT
  verifyJwt: User

  # Chat queries:
  # Get a chat by its ID, formerly got all chats by user's ID
  userChats(id:ID!): Chat

  # Post Queries:
  # Get all posts
  posts: [Post]

  # Get a post by its ID
  post(id: ID!): Post
}

type Mutation {
  # Auth/User mutations
  signUp(
    username: String!,
    email: String!,
    firstName: String!,
    lastName: String!,
    password: String!,
    dob: String,
    bio: String
  ): User

  login(email: String!, password: String!): User

  logout: String # token?

  #updateUser(): User

  deleteUser(username: String!): DeleteUserResponse!

  # Chat mutations
  createChat(
    participants: [String!]!
    name: [String!]
  ): Chat

  sendMessage(
    chat: String!
    sender: String!
    text: String
    image: String
    likes: Int
    timestamp: String
    hidden: Boolean
  ): Chat

  # Deletes a chat for all users
  deleteChat(chat: ID!): DeleteChatResponse!

  # Removes a chat from one user's "chats" array
  leaveChat(chat: ID!): LeaveChatResponse!

  # Post mutations
  createPost(
    poster: String!
    text: String
    timestamp: String
    image: String!
  ): Post

  deletePost(post: String!): DeletePostResponse!

  # Comment on a post
  addComment(
    postId: String!
    commenter: String!
    text: String!
    timestamp: String
  ): Comment
}

type Subscription {
  # Update a chat with a new message via its ID
  messageSent(id: ID!): Message

  # not implemented yet
  # When a user is included in a new chat, it renders in their "messages" tab
  # May have to update User itself > user's chats array gets pushed to >
  # that triggers the client to re-query user's Chats (userChats query)
  chatCreated(id: ID!): Chat
}


# Type defs for entities (gql types?)
type User {
  _id: ID!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  dob: Date!
  bio: String!
  picture: String
  chats: [String!]!
  posts: [String!]!
  followers: [String!]!
  following: [String!]!
}

type Chat {
  _id: ID!
  participants: [String!]!
  name: [String]!
  messages: [Message!]!
}

type Message {
  sender: String!
  username: String!
  text: String!
  image: String
  likes: Int
  timestamp: String
  hidden: Boolean
}

type Post {
  _id: ID!
  poster: String!
  text: String!
  timestamp: String!
  likes: Int!
  comments: [Comment!]!
  image: String!
}

type Comment {
  commenter: User!
  text: String!
  timestamp: String!
  likes: Int!
  #replies: [CommentReply!]!
}

# CommentReply not yet implemented

# type CommentReply {
#   comment: Comment!
#   replier: User!
#   text: String!
#   timestamp: String!
#   likes: Int!
# }

type AuthPayload {
  token: String
  user: User
}

type DeletePostResponse {
  success: Boolean!
  deletedPost: Post
  errors: [String]
}

type DeleteUserResponse {
  success: Boolean!
  deletedUser: User
  errors: [String]
}

type DeleteChatResponse {
  success: Boolean!
  deletedChat: Chat
  errors: [String]
}

type LeaveChatResponse {
  success: Boolean!
  leftChat: Chat
  errors: [String]
}